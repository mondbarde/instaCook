import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled from "styled-components";

// Based upon Benjamin den Boer's Input Component
// https://store.framer.com/package/benjamin/input

interface Props {
    value: string;
    onValueChange: (value: string) => void;
    placeholder: string;
    backgroundColor: string;
    placeholderColor: string;
    textColor: string;
    focusColor: string;
    fontSize: number;
    customFont: boolean;
    customFontFamily: string;
    width: number;
    height: number;
    padding: number;
    paddingPerSide: boolean;
    paddingTop: number;
    paddingRight: number;
    paddingBottom: number;
    paddingLeft: number;
    borderWidth: number;
    borderRadius: number;
    borderColor: string;
    multiLine: boolean;
    password: boolean;
}

interface State {
    value: string;
    valueFromProps: string;
}

export class FormInput extends React.Component<Partial<Props>, State> {
    static defaultProps = {
        // Size
        width: 240,
        height: 48,
        // Text
        fontSize: 16,
        customFont: false,
        value: "",
        textColor: "#000",
        placeholder: "Placeholderâ€¦",
        placeholderColor: "#999",
        // Padding
        paddingPerSide: false,
        padding: 15,
        paddingTop: 0,
        paddingRight: 15,
        paddingBottom: 0,
        paddingLeft: 15,
        // Border
        borderWidth: 1,
        borderColor: "rgba(0,0,0,0.2)",
        borderRadius: 2,
        focusColor: "#09F",
        // Background
        backgroundColor: "#FFF",
        // Variants
        multiLine: false,
        password: false
    };

    static propertyControls: PropertyControls<Props> = {
        fontSize: {
            type: ControlType.Number,
            title: "Font Size",
            min: 1
        },
        customFont: { type: ControlType.Boolean, title: "Custom Font" },
        customFontFamily: {
            type: ControlType.String,
            title: "Font",
            hidden: (props) => props.customFont == false
        },
        value: { type: ControlType.String, title: "Value" },
        textColor: { type: ControlType.Color, title: " " },
        placeholder: { type: ControlType.String, title: "Default" },
        placeholderColor: { type: ControlType.Color, title: " " },
        padding: {
            type: ControlType.FusedNumber,
            toggleKey: "paddingPerSide",
            toggleTitles: ["All Sides", "Per Side"],
            valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
            valueLabels: ["T", "R", "B", "L"],
            min: 0,
            title: "Padding"
        },
        borderWidth: {
            type: ControlType.Number,
            title: "Border",
            min: 0,
            max: 6,
            displayStepper: true
        },
        borderColor: {
            type: ControlType.Color,
            title: " ",
            hidden: (props) => props.borderWidth <= 0
        },
        focusColor: {
            type: ControlType.Color,
            title: "Focused",
            hidden: (props) => props.borderWidth <= 0
        },
        borderRadius: { type: ControlType.Number, title: "Radius" },
        backgroundColor: { type: ControlType.Color, title: "Background" },
        multiLine: { type: ControlType.Boolean, title: "Text Area" },
        password: { type: ControlType.Boolean, title: "Password" }
    };

    state = {
        value: FormInput.defaultProps.value,
        valueFromProps: FormInput.defaultProps.value
    };

    // Allow setting the Value from within the property panel.
    static getDerivedStateFromProps(props: Props, state: State) {
        if (props.value !== state.valueFromProps) {
            return { value: props.value, valueFromProps: props.value };
        }
    }

    onChange = (event: React.ChangeEvent) => {
        const element = this.props.multiLine
            ? (event.nativeEvent.target as HTMLTextAreaElement)
            : (event.nativeEvent.target as HTMLInputElement);

        const value = element.value;

        this.setState({ value });

        if (this.props.onValueChange) {
            this.props.onValueChange(value);
        }
    };

    StyledInput = this.props.multiLine
        ? styled.textarea`
            line-height: 1.5;
            margin: 0;
            ::-webkit-input-placeholder {
                color: ${this.props.placeholderColor} !important;
            }
            &:hover {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.focusColor} !important;
            }
            &:focus {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.focusColor} !important;
            }
        `
        : styled.input`
            margin: 0;
            ::-webkit-input-placeholder {
                color: ${this.props.placeholderColor} !important;
            }
            &:hover {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.focusColor} !important;
            }
            &:focus {
                box-shadow: inset 0 0 0 ${this.props.borderWidth}px ${this.props.focusColor} !important;
            }
        `;

    render() {
        const {
            placeholder,
            backgroundColor,
            textColor,
            fontSize,
            borderRadius,
            paddingPerSide,
            padding,
            paddingTop,
            paddingRight,
            paddingBottom,
            paddingLeft,
            borderColor,
            borderWidth,
            password
        } = this.props;

        const { value } = this.state;

        const paddingValue = paddingPerSide
            ? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px`
            : padding;

        return (
            <this.StyledInput
                onChange={this.onChange}
                value={value}
                placeholder={placeholder}
                style={{
                    ...style,
                    backgroundColor,
                    color: textColor,
                    fontSize: fontSize,
                    fontFamily: this.props.customFont ? this.props.customFontFamily : "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
                    borderRadius: borderRadius,
                    padding: this.props.multiLine ? paddingValue : paddingPerSide ? paddingValue : '0 ' + padding + 'px 0 ' + padding + 'px',
                    boxShadow: `inset 0 0 0 ${borderWidth}px ${borderColor}`
                }}
                type={password ? "password" : "text"}
            />
        );
    }
}

const style: React.CSSProperties = {
    border: "none",
    width: "100%",
    height: "100%",
    outline: "none",
    resize: "none"
};
