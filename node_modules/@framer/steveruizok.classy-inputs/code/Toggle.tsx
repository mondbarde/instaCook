import * as React from 'react'
import {
	PropertyControls,
	ControlType,
	FrameProperties,
	FramerEvent,
} from 'framer'

const baseStyle: React.CSSProperties = {
	cursor: 'inherit',
	outline: 'none',
	width: '100%',
	overflow: 'hidden',
	background: 'rgba(136, 85, 255, 0.1)',
	border: '1px solid rgba(136, 85, 255, 0.2)',
	transition: 'all .2s',
}

interface State {
	toggled: boolean
}

interface Props extends FrameProperties {
	inputRef: any
	disabled: boolean
	toggled: boolean
	useCSS: boolean
	cssClassName: string
	style: any
	onMount: (ref: React.RefObject<any>, state: State, component: Toggle) => void
	onBlur: (event: any, state: State, component: Toggle) => void
	onFocus: (event: any, state: State, component: Toggle) => void
	onMouseEnter: (event: any, state: State, component: Toggle) => void
	onMouseLeave: (event: any, state: State, component: Toggle) => void
	onClick: (event: any, state: State, component: Toggle) => void
	onToggle: (toggled: boolean, component: Toggle) => void
}

export class Toggle extends React.Component<Props> {
	privateRef = React.createRef()

	// Set default properties
	static defaultProps = {
		height: 44,
		width: 72,
		value: null,
		toggled: false,
		style: {},
		useCSS: false,
		onMount: () => {},
		onBlur: () => {},
		onFocus: () => {},
		onMouseEnter: () => {},
		onMouseLeave: () => {},
		onToggle: () => {},
		onClick: () => {},
	}

	state: State = {
		toggled: this.props.toggled,
	}

	// Items shown in property panel
	static propertyControls: PropertyControls = {
		toggled: {
			type: ControlType.Boolean,
			title: 'Toggled',
			defaultValue: false,
		},
		disabled: {
			type: ControlType.Boolean,
			title: 'Disabled',
			defaultValue: false,
		},
		useCSS: {
			type: ControlType.Boolean,
			title: 'Styling',
			disabledTitle: 'Style',
			enabledTitle: 'CSS',
			defaultValue: false,
		},
		cssClassName: {
			type: ControlType.String,
			title: 'Classname',
			defaultValue: 'example-toggle',
			hidden: ({ useCSS }) => !useCSS,
		},
	}

	componentDidMount() {
		this.props.onMount(this.getInputRef(), this.state, this)
	}

	getElement = () => {
		const {
			onBlur,
			onFocus,
			onMouseEnter,
			onMouseLeave,
			cssClassName,
			disabled,
			useCSS,
		} = this.props

		const { toggled } = this.state

		const railProps = {
			className: useCSS ? cssClassName + ' rail' : '',
			style: useCSS
				? {}
				: {
						...baseStyle,
						position: 'absolute',
						top: 'calc(50% - 8px)',
						left: 12,
						right: 12,
						width: 'auto',
						height: 16,
						background: toggled
							? 'rgba(136, 85, 255, 0.7)'
							: 'rgba(136, 85, 255, 0.1)',
						borderRadius: 12,
				  },
		}

		const knobProps = {
			className: useCSS ? cssClassName + ' knob' : '',
			style: useCSS
				? {}
				: {
						...baseStyle,
						background: '#8855FF',
						position: 'absolute',
						top: 'calc(50% - 16px)',
						left: toggled ? 'calc(100% - 40px)' : 8,
						height: 32,
						width: 32,
						borderRadius: 32,
				  },
		}

		const containerProps = {
			ref: this.getInputRef(),
			className: useCSS ? cssClassName : '',
			onClick: this.handleClick,
			onBlur: (event: any) => onBlur(event, this.state, this),
			onFocus: (event: any) => onFocus(event, this.state, this),
			onMouseEnter: (event: any) => onMouseEnter(event, this.state, this),
			onMouseLeave: (event: any) => onMouseLeave(event, this.state, this),
			style: {
				pointerEvents: disabled ? 'none' : 'all',
				position: 'relative',
				height: '100%',
				width: '100%',
				opacity: 1,
			},
		}

		if (useCSS && this.state.toggled) {
			railProps.className += ' toggled'
			knobProps.className += ' toggled'
		}

		if (disabled) {
			if (useCSS) {
				containerProps.className += ' disabled'
			} else {
				containerProps.style.opacity = 0.5
			}
		}

		return [containerProps, railProps, knobProps]
	}

	setToggle = (toggled: boolean) => {
		if (toggled === this.state.toggled) return

		this.setState({ toggled }, () => {
			this.props.onToggle(toggled, this)
		})
	}

	handleClick = (event: any) => {
		this.setToggle(!this.state.toggled)
		this.props.onClick(event, this.state, this)
	}

	componentWillReceiveProps(props: Props) {
		this.setToggle(props.toggled)
	}

	componentWillMount() {
		this.setToggle(this.props.toggled)
	}

	getInputRef = () => {
		return this.props.inputRef || this.privateRef
	}

	render() {
		const [containerProps, railProps, knobProps] = this.getElement()

		return (
			<div {...containerProps}>
				<div {...railProps} />
				<div {...knobProps} />
			</div>
		)
	}
}
