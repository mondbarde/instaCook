import * as React from 'react'
import {
	PropertyControls,
	Frame,
	ControlType,
	Draggable,
	FrameProperties,
} from 'framer'

const baseStyle: React.CSSProperties = {
	cursor: 'inherit',
	outline: 'none',
	width: '100%',
	overflow: 'hidden',
	background: 'rgba(136, 85, 255, 0.1)',
	border: '1px solid rgba(136, 85, 255, 0.2)',
	transition: 'all .2s',
}

// Define type of property
interface Props extends FrameProperties {
	id: string
	inputRef: any
	disabled: boolean
	value: number
	min: number
	max: number
	step: number
	useCSS: boolean
	cssClassName: string
	style: any
	knobSize: number
	railHeight: number
	onMount: (ref: React.RefObject<any>, instance: Slider) => void
	onBlur: (params: any) => void
	onFocus: (params: any) => void
	onMouseEnter: (params: any) => void
	onMouseLeave: (params: any) => void
	onValueChange: (params: any) => void
	onClick: (params: any) => void
	onTap: (params: any) => void
}

export class Slider extends React.Component<Props> {
	privateRef = React.createRef()

	// Set default properties
	static defaultProps = {
		height: 44,
		width: 200,
		value: null,
		toggled: false,
		style: {},
		useCSS: false,
		knobSize: 32,
		railHeight: 8,
		onMount: () => {},
		onBlur: () => {},
		onFocus: () => {},
		onMouseEnter: () => {},
		onMouseLeave: () => {},
		onValueChange: () => {},
		onClick: () => {},
	}

	state = {
		value: this.props.value,
	}

	// Items shown in property panel
	static propertyControls: PropertyControls = {
		value: {
			type: ControlType.Number,
			title: 'Value',
			min: 0,
			max: 1000,
			defaultValue: 0,
			displayStepper: true,
		},
		min: {
			type: ControlType.Number,
			title: 'Min',
			min: 0,
			max: 1000,
			defaultValue: 0,
			displayStepper: true,
		},
		max: {
			type: ControlType.Number,
			title: 'Max',
			min: 0,
			max: 1000,
			defaultValue: 10,
			displayStepper: true,
		},
		step: {
			type: ControlType.Number,
			title: 'Step',
			defaultValue: 1,
			min: 0,
			max: 1000,
			step: 0.01,
			displayStepper: true,
		},
		disabled: {
			type: ControlType.Boolean,
			title: 'Disabled',
			defaultValue: false,
		},
		useCSS: {
			type: ControlType.Boolean,
			title: 'Styling',
			disabledTitle: 'Style',
			enabledTitle: 'CSS',
			defaultValue: false,
		},
		cssClassName: {
			type: ControlType.String,
			title: 'Classname',
			defaultValue: 'example-toggle',
			hidden: ({ useCSS }) => !useCSS,
		},
	}

	componentDidMount() {
		this.props.onMount(this.getInputRef(), this)
	}

	getElement = () => {
		const {
			onBlur,
			onFocus,
			onMouseEnter,
			onMouseLeave,
			cssClassName,
			disabled,
			useCSS,
			knobSize,
			railHeight,
			max,
			min,
		} = this.props

		const { value } = this.state

		let { width, height } = this.props
		width = width as number
		height = height as number

		const railProps = {
			className: useCSS ? cssClassName + ' rail' : '',
			style: useCSS
				? {}
				: {
						...baseStyle,
						pointerEvents: 'none',
						position: 'absolute',
						top: 'calc(50% - 4px)',
						left: 12,
						right: 12,
						width: 'auto',
						height: 8,
						background: 'rgba(136, 85, 255, 0.1)',
						borderRadius: 12,
				  },
		}

		const knobProps = {
			className: useCSS ? cssClassName + ' knob' : '',
			style: useCSS
				? {}
				: {
						...baseStyle,
						pointerEvents: 'none',
						transition: 'none',
						background: '#8855FF',
						position: 'absolute',
						height: knobSize,
						width: knobSize,
						left: (value / (max - min)) * (width - knobSize),
						top: height / 2 - knobSize / 2,
						borderRadius: knobSize / 2,
				  },
		}

		const containerProps = {
			ref: this.getInputRef(),
			className: useCSS ? cssClassName : '',
			onBlur,
			onFocus,
			onMouseEnter,
			onMouseLeave,
			style: {
				pointerEvents: 'none',
				position: 'relative',
				height: '100%',
				width: '100%',
				opacity: 1,
			},
		}

		if (disabled) {
			if (useCSS) {
				containerProps.className += ' disabled'
			} else {
				containerProps.style.opacity = 0.5
			}
		}

		return [containerProps, railProps, knobProps]
	}

	handleInteraction = (ev: any) => {
		if (this.props.disabled) return
		this.setValue(ev.point.x)
	}

	setValue(x: number) {
		let { min, max, step, disabled, width, knobSize } = this.props
		width = width as number

		const normal = Math.min(Math.max(x / (width - knobSize), 0), 1)

		let rawValue = min + normal * (max - min)

		if (disabled) return

		// get rounded value at correct length
		let length: any = step.toString().split('.')
		length = length.length === 1 ? 1 : length[1].length

		rawValue = parseFloat(rawValue.toFixed(length))

		let value: number, dif: number, distance: number

		dif = parseFloat((rawValue % step).toFixed(length))

		distance = step / 2
		if (dif <= distance) {
			value = rawValue - dif
		} else {
			value = rawValue + (step - dif)
		}

		if (value === this.state.value) return

		this.setState({ value }, () => {
			this.props.onValueChange(this.state.value)
		})
	}

	componentWillMount() {
		this.setValue(this.props.value)
	}

	componentWillReceiveProps(props: Props) {
		this.setValue(props.value)
	}

	getInputRef = () => {
		return this.props.inputRef || this.privateRef
	}

	// return where this canvas is mounting - a preview or the Framer X canvas
	get framerContext(): string {
		const searchLoop: (node: any) => 'canvas' | 'preview' = node => {
			if (!node) return 'canvas'
			if (node.key === 'preview') return 'preview'
			return searchLoop(node._debugOwner)
		}

		const component = this as any // cough wheeze
		return searchLoop(component._reactInternalFiber)
	}

	render() {
		let {
			height,
			width,
			knobSize,
			disabled,
			railHeight,
			id,
			min,
			max,
			step,
			onMouseEnter,
			onMouseLeave,
		} = this.props
		const { value } = this.state
		const [containerProps, railProps, knobProps] = this.getElement()

		height = height as number
		width = width as number

		return [
			<Frame
				key={`${id}_event_container`}
				left={12}
				right={12}
				onTap={this.handleInteraction}
				height={height}
				width={width - 24}
				onPan={this.handleInteraction}
				onMouseEnter={onMouseEnter}
				onMouseLeave={onMouseLeave}
				background={null}
				z={999}
			/>,
			<div key={`${id}_slider_container`} {...containerProps}>
				<div {...railProps} />,
				<div {...knobProps} />,
				<input
					key={`${id}_slider_container`}
					type="range"
					style={{
						display: 'none',
						position: 'absolute',
						left: knobSize / 4,
						right: knobSize / 4,
						top: `calc(50% - 8px)`,
						pointerEvents: 'none',
					}}
					value={value}
					min={min}
					max={max}
					step={step}
				/>
			</div>,
		]
	}
}
