import * as React from 'react'
import { PropertyControls, ControlType, FrameProperties } from 'framer'

const baseStyle: React.CSSProperties = {
	cursor: 'inherit',
	outline: 'none',
	width: '100%',
	overflow: 'hidden',
	color: '#8855FF',
	background: 'rgba(136, 85, 255, 0.1)',
	border: '1px solid rgba(136, 85, 255, 0.2)',
	borderRadius: '8px',
	padding: '12px 16px',
	fontSize: 14,
	transition: 'all .2s',
}

// Define type of property
interface Props extends FrameProperties {
	inputRef: any
	height: number
	text: string
	disabled: boolean
	toggle: boolean
	useCSS: boolean
	cssClassName: string
	style: any
	onMount: (ref: React.RefObject<any>, instance: Button) => void
	onBlur: (params: any) => void
	onFocus: (params: any) => void
	onMouseEnter: (params: any) => void
	onMouseLeave: (params: any) => void
	onToggle: (params: any) => void
	onClick: (params: any) => void
}

export class Button extends React.Component<Props> {
	privateRef = React.createRef()

	state = {
		toggled: false,
	}

	// Set default properties
	static defaultProps = {
		height: 44,
		value: null,
		toggle: false,
		text: 'Click here!',
		style: {},
		useCSS: false,
		onMount: () => {},
		onBlur: () => {},
		onFocus: () => {},
		onMouseEnter: () => {},
		onMouseLeave: () => {},
		onToggle: () => {},
		onClick: () => {},
	}

	// Items shown in property panel
	static propertyControls: PropertyControls = {
		toggle: {
			type: ControlType.Boolean,
			title: 'Toggle',
			defaultValue: false,
		},
		disabled: {
			type: ControlType.Boolean,
			title: 'Disabled',
			defaultValue: false,
		},
		useCSS: {
			type: ControlType.Boolean,
			title: 'Styling',
			disabledTitle: 'Style',
			enabledTitle: 'CSS',
			defaultValue: false,
		},
		cssClassName: {
			type: ControlType.String,
			title: 'Classname',
			defaultValue: 'example-button',
			hidden: ({ useCSS }) => !useCSS,
		},
		text: {
			type: ControlType.String,
			title: 'Value',
			defaultValue: 'Click here!',
		},
	}

	componentDidMount() {
		this.props.onMount(this.getInputRef(), this)
	}

	getElement = (type = 'button') => {
		const {
			onClick,
			onBlur,
			onFocus,
			onMouseEnter,
			onMouseLeave,
			cssClassName,
			disabled,
			text,
			style,
			toggle,
			useCSS,
		} = this.props

		const defaultProps = {
			ref: this.getInputRef(),
			className: useCSS ? cssClassName : '',
			defaultValue: text,
			disabled: disabled,
			onClick: toggle ? this.handleToggle : onClick,
			onBlur: onBlur,
			onFocus: onFocus,
			onMouseEnter: onMouseEnter,
			onMouseLeave: onMouseLeave,
			style: useCSS ? {} : { ...baseStyle, ...style },
		}

		if (toggle && this.state.toggled) {
			if (useCSS) {
				defaultProps.className += ' toggled'
			} else {
				defaultProps.style.filter = 'brightness(65%)'
			}
		}

		if (disabled) {
			if (useCSS) {
				defaultProps.className += ' disabled'
			} else {
				defaultProps.style.opacity = 0.5
			}
		}

		const elements = {
			button: {
				element: 'button',
				props: {},
			},
		}

		const { element, props } = elements[type]

		return React.createElement(element, { ...defaultProps, ...props }, text)
	}

	handleToggle = ev => {
		this.setState(
			{
				toggled: !this.state.toggled,
			},
			() => {
				this.props.onToggle(this.state.toggled)
			}
		)
	}

	getInputRef = () => {
		return this.props.inputRef || this.privateRef
	}

	render() {
		const element = this.getElement()

		return <div style={{ height: '100%', width: '100%' }}>{element}</div>
	}
}
