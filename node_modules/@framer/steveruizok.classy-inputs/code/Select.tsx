import * as React from 'react'
import { PropertyControls, ControlType, FrameProperties } from 'framer'

const baseStyle: React.CSSProperties = {
	cursor: 'inherit',
	position: 'absolute',
	left: 0,
	top: 0,
	outline: 'none',
	width: '100%',
	height: '100%',
	overflow: 'hidden',
	color: '#8855FF',
	background: 'rgba(136, 85, 255, 0.1)',
	border: '1px solid rgba(136, 85, 255, 0.2)',
	borderRadius: '8px',
	padding: '12px 16px',
	fontSize: 14,
	transition: 'all .2s',
}

// Define type of property
interface Props extends FrameProperties {
	id: any
	inputRef: any
	height: number
	text: string
	disabled: boolean
	toggle: boolean
	useCSS: boolean
	cssClassName: string
	style: any
	options: string
	nullable: boolean
	onMount: (ref: React.RefObject<any>, instance: Select) => void
	onBlur: (params: any) => void
	onFocus: (params: any) => void
	onMouseEnter: (params: any) => void
	onMouseLeave: (params: any) => void
	onSelect: (params: any) => void
}

interface State {
	value: string | null
}

export class Select extends React.Component<Props> {
	privateRef = React.createRef()

	state: State = {
		value: this.props.nullable ? '' : this.props.options.split(',')[0],
	}

	// Set default properties
	static defaultProps = {
		nullable: false,
		height: 44,
		value: null,
		toggle: false,
		text: null,
		style: {},
		useCSS: false,
		onMount: () => {},
		onBlur: () => {},
		onFocus: () => {},
		onMouseEnter: () => {},
		onMouseLeave: () => {},
		onSelect: () => {},
	}

	// Items shown in property panel
	static propertyControls: PropertyControls = {
		disabled: {
			type: ControlType.Boolean,
			title: 'Disabled',
			defaultValue: false,
		},
		useCSS: {
			type: ControlType.Boolean,
			title: 'Styling',
			disabledTitle: 'Style',
			enabledTitle: 'CSS',
			defaultValue: false,
		},
		cssClassName: {
			type: ControlType.String,
			title: 'Classname',
			defaultValue: 'example-select',
			hidden: ({ useCSS }) => !useCSS,
		},
		options: {
			type: ControlType.String,
			title: 'Options',
			defaultValue: 'blue, red, yellow',
		},
		nullable: {
			type: ControlType.Boolean,
			title: 'Nullable',
			defaultValue: false,
		},
	}

	componentDidMount() {
		this.props.onMount(this.getInputRef(), this)
	}

	componentWillReceiveProps(props: Props) {
		this.setState({
			value: props.nullable ? null : props.options.split(',')[0],
		})
	}

	getElement = () => {
		const {
			options,
			onBlur,
			onFocus,
			onMouseEnter,
			onMouseLeave,
			cssClassName,
			disabled,
			style,
			useCSS,
			nullable,
			id,
		} = this.props

		const { value } = this.state

		const defaultProps = {
			className: useCSS ? cssClassName : '',
			style: useCSS ? {} : { ...baseStyle, ...style },
		}

		if (disabled) {
			if (useCSS) {
				defaultProps.className += ' disabled'
			} else {
				defaultProps.style.opacity = 0.5
			}
		}

		let values = options.split(',')

		if (nullable) {
			values = [null, ...values]
		}

		const optionElements = values.map((o, i) => (
			<option key={id + ' option_' + i} value={o && o.trim()}>
				{o}
			</option>
		))

		const selectProps = {
			ref: this.getInputRef(),
			onChange: this.handleSelect,
			defaultValue: value,
			disabled: disabled,
			onBlur: onBlur,
			onFocus: onFocus,
			onMouseEnter: onMouseEnter,
			onMouseLeave: onMouseLeave,
			style: {
				cursor: 'inherit',
				pointerEvents: disabled ? 'none' : 'all',
				position: 'absolute',
				top: 0,
				left: 0,
				height: '100%',
				width: '100%',
				border: 'none',
				outline: 'none',
				boxShadow: 'none',
				background: 'transparent',
				backgroundImage: 'none',
				opacity: 0,
			},
		}

		const caretProps = {
			style: {
				display: 'flex',
				alignItems: 'center',
				position: 'absolute',
				top: 0,
				right: '8px',
				height: '100%',
			},
		}

		return [defaultProps, selectProps, caretProps, optionElements, values]
	}

	handleSelect = ev => {
		const { value } = ev.target as HTMLSelectElement
		this.setState({ value }, () => {
			this.props.onSelect(value)
		})
	}

	getInputRef = () => {
		return this.props.inputRef || this.privateRef
	}

	render() {
		const { value } = this.state
		const { useCSS } = this.props
		const [
			containerProps,
			selectProps,
			caretProps,
			optionElements,
			values,
		] = this.getElement()

		return (
			<div style={{ height: '100%', width: '100%', position: 'relative' }}>
				<div {...containerProps as any}>{value || values[0]}</div>
				<select {...selectProps as any}>{optionElements}</select>
				{useCSS || (
					<div {...caretProps as any}>
						<svg
							fill="#8855FF"
							height="24"
							viewBox="0 0 24 24"
							width="24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z" />
						</svg>
					</div>
				)}
			</div>
		)
	}
}
