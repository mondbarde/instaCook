import * as React from 'react'
import { PropertyControls, ControlType, FrameProperties } from 'framer'

const baseStyle: React.CSSProperties = {
	cursor: 'inherit',
	outline: 'none',
	width: '100%',
	height: '100%',
	overflow: 'hidden',
	color: '#8855FF',
	textAlign: 'left',
	background: 'rgba(136, 85, 255, 0.1)',
	border: '1px solid rgba(136, 85, 255, 0.2)',
	borderRadius: '8px',
	padding: '12px 16px',
	fontSize: 14,
}

// Define type of property
interface Props extends FrameProperties {
	inputRef: any
	value: string
	placeholder: string
	type: string
	disabled: boolean
	inputClassName: string
	style: any
	useCSS: boolean
	onMount: (ref: React.RefObject<any>, instance: Input) => void
	onBlur: (params: any) => void
	onFocus: (params: any) => void
	onMouseEnter: (params: any) => void
	onMouseLeave: (params: any) => void
	onValueChange: (params: any) => void
}

export class Input extends React.Component<Props> {
	privateRef = React.createRef()

	state = {
		value: this.props.value,
	}

	// Set default properties
	static defaultProps = {
		height: 44,
		value: null,
		type: 'text',
		placeholder: 'Start typing...',
		style: {},
		disabled: false,
		useCSS: false,
		onMount: () => {},
		onBlur: () => {},
		onFocus: () => {},
		onMouseEnter: () => {},
		onMouseLeave: () => {},
		onValueChange: () => {},
	}

	// Items shown in property panel
	static propertyControls: PropertyControls = {
		type: {
			type: ControlType.Enum,
			title: 'Password',
			options: ['text', 'password', 'textarea'],
			optionTitles: ['Text', 'Password', 'Text Area'],
			defaultValue: 'text',
		},
		useCSS: {
			type: ControlType.Boolean,
			title: 'Styling',
			disabledTitle: 'Style',
			enabledTitle: 'CSS',
			defaultValue: false,
		},
		inputClassName: {
			type: ControlType.String,
			title: 'Classname',
			defaultValue: 'example-input',
			hidden: ({ useCSS }) => !useCSS,
		},
		placeholder: { type: ControlType.String, title: 'Placeholder' },
		value: { type: ControlType.String, title: 'Value' },
		disabled: {
			type: ControlType.Boolean,
			title: 'Disabled',
			defaultValue: false,
		},
	}

	componentDidMount() {
		this.props.onMount(this.getInputRef(), this)
	}

	getInputRef = () => {
		return this.props.inputRef || this.privateRef
	}

	handleInput = () => {
		const input = this.getInputRef().current as HTMLInputElement
		this.setState(
			{
				value: input.value,
			},
			() => {
				this.props.onValueChange(this.state.value)
			}
		)
	}

	getInput = type => {
		const {
			onBlur,
			onFocus,
			onMouseEnter,
			onMouseLeave,
			inputClassName,
			placeholder,
			style,
			disabled,
			useCSS,
		} = this.props
		const { value } = this.state

		const defaultProps = {
			ref: this.getInputRef(),
			className: useCSS ? inputClassName : '',
			defaultValue: value,
			placeholder: placeholder,
			onInput: this.handleInput,
			onBlur: onBlur,
			onFocus: onFocus,
			onMouseEnter: onMouseEnter,
			onMouseLeave: onMouseLeave,
			readOnly: null,
			style: useCSS ? {} : { ...baseStyle, ...style },
		}

		if (disabled) {
			defaultProps.readOnly = 'readonly'
			if (useCSS) {
				defaultProps.className += ' disabled'
			} else {
				defaultProps.style.opacity = 0.5
			}
		}

		const inputs = {
			text: {
				element: 'input',
				props: { type: 'text' },
			},
			password: {
				element: 'input',
				props: { type: 'password' },
			},
			textarea: {
				element: 'textarea',
				props: {},
			},
		}

		const { element, props } = inputs[type]

		return React.createElement(element, { ...defaultProps, ...props })
	}

	componentWillReceiveProps({ value, placeholder }) {
		if (!this.state.value) {
			this.setState({ value, placeholder })
		}
	}

	render() {
		const input = this.getInput(this.props.type)

		return <div style={{ height: '100%', width: '100%' }}>{input}</div>
	}
}
